---
- name: debug run_commands_user
  debug:
    msg: "run_commands_user: {{ run_commands_user }}"

- name: check normal user
  debug:
    msg: "{{ ansible_user_id }}"

- name: run whoami command
  become: true
  become_user: "{{ run_commands_user }}"
  command:
    cmd: "whoami"
  register: whoami

- name: debug the whoami user
  debug:
    msg: "{{ whoami }}"

- name: Check if there exists the service 'automation-controller.service'
  become: true
  become_user: "{{ run_commands_user }}"
  command:
    cmd: "systemctl status automation-controller.service"
  changed_when: false
  failed_when: false
  register: automation_controller_service

- name: "debug the automation_controller_service"
  ansible.builtin.debug:
    var: automation_controller_service

- name: Make sure Automation Controller service is online before changing base URL
  ansible.builtin.service:
    name: "{{ service_to_start }}"
    state: started
  loop:
    - postgresql.service
    - automation-controller.service
  loop_control:
    loop_var: service_to_start
  register: controller_online
  until: controller_online is not failed
  retries: 5
  when: automation_controller_service.rc != 4

- name: Make sure Automation Controller container is online before changing base URL
  become: true
  become_user: "{{ run_commands_user }}"
  containers.podman.podman_container:
    name: automation-controller-web
    state: started
  register: controller_online
  until: controller_online is not failed
  retries: 5
  when: automation_controller_service.rc == 4

- name: set password
  block:
    - name: change admin password R3dh4t1!
      awx.awx.user:
        username: "admin"
        password: "{{ admin_password }}"
        state: present
        superuser: true
        controller_username: admin
        controller_password: "R3dh4t1!"
        controller_host: "https://localhost"
        validate_certs: false
      register: set_password
      until: set_password is not failed
  rescue:
    - name: change admin password
      awx.awx.user:
        username: "admin"
        password: "{{ admin_password }}"
        state: present
        superuser: true
        controller_username: admin
        controller_password: "{{ admin_password }}"
        controller_host: "https://localhost"
        validate_certs: false
      register: set_password
      until: set_password is not failed
