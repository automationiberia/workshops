---
- name: Remove the AWX dns entries when teardown
  vars:
    ec2_wait: false
    teardown: true
    s3_state: absent
    state: absent
    debug_teardown: false
  hosts: localhost
  tasks:
    - name: add dns entires for student awx node
      ansible.builtin.include_role:
        name: ../../roles/aws_dns_awx
      when:
        - dns_type is defined
        - dns_type == "aws"
	- teardown | bool

- name: run AWX on awx host
  hosts: awx_nodes
  become: true
  gather_facts: true
  tags:
    - awx
  tasks:
    - name: configure user accounts
      ansible.builtin.include_role:
        name: ../../roles/user_accounts
        apply:
          tags:
            - awx

    # - name: custom names for the dns entries
    #   ansible.builtin.set_fact:
    #     given_record: "{{ student }}.awx.{{ ec2_name_prefix|lower }}.{{ workshop_dns_zone }}"

    - name: configure common role
      ansible.builtin.include_role:
        name: ../../roles/common
        apply:
          tags:
            - awx

    - name: setup /etc/hosts file per student
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/../{{ ec2_name_prefix }}/{{ student }}-etchosts.txt"
        dest: "/etc/hosts"

    - name: Run tasks from 15_package_dependencies at role control_node (also needed by AWX installation)
      ansible.builtin.include_role:
        name: ../../roles/control_node
        tasks_from: 15_package_dependencies
        apply:
          tags:
            - awx

    - name: add dns entires for student awx node
      ansible.builtin.include_role:
        name: ../../roles/aws_dns_awx
        apply:
          tags:
            - awx
      when:
        - dns_type is defined
        - dns_type == "aws"

    - name: "Import awx_pod role to install it all"
      vars:
        awx_admin_user: admin
        awx_admin_password: "{{ admin_password }}"
        awx_podman_dir: /tmp/awx-lab
        awx_host_port: 80
        awx_host_ssl_port: 443
        ssl_certificate: "{{ playbook_dir }}/../{{ ec2_name_prefix }}/awx-private.pem"
        ssl_certificate_key: "{{ playbook_dir }}/../{{ ec2_name_prefix }}/awx-private-key.pem"
        ca_trust_file: "{{ playbook_dir }}/../{{ ec2_name_prefix }}/awx-ca-cert.pem"
        # container_state: running
        # container_state: absent
        # container_run_as_user: ansible
      ansible.builtin.include_role:
        name: ../../roles/awx_pod
        apply:
          tags:
            - awx

    - name: "Install and configure code server (AWX)"
      vars:
        awx_podman_dir: /tmp/awx-lab
      ansible.builtin.include_role:
        name: ../../roles/code_server_awx
        apply:
          tags:
            - awx
      when:
        - code_server is defined
        - code_server
        - controllerinstall is defined
        - controllerinstall

- name: Populate AWX Configuration
  hosts: awx_nodes
  connection: local
  gather_facts: false
  tags:
    - awx_populate
  vars:
    controller_configuration_projects_async_retries: 120
    controller_configuration_projects_async_delay: 2
    controller_username: "admin"
    controller_password: "{{ admin_password }}"
    controller_hostname: "{{ student }}.awx.{{ ec2_name_prefix|lower }}.{{ workshop_dns_zone }}"
    controller_validate_certs: False
    controller_configuration_filetree_read_secure_logging: False
    ansible_async_dir: "/home/runner/.ansible_async/"
    # Controller Directory Path
    filetree_controller_settings: &filetree_controller_path "/tmp/checkout/examples/awx/configs"
    filetree_controller_organizations: *filetree_controller_path
    filetree_controller_labels: *filetree_controller_path
    filetree_controller_user_accounts: *filetree_controller_path
    filetree_controller_teams: *filetree_controller_path
    filetree_controller_credential_types: *filetree_controller_path
    filetree_controller_credentials: *filetree_controller_path
    filetree_controller_credential_input_sources: *filetree_controller_path
    filetree_controller_notifications: *filetree_controller_path
    filetree_controller_projects: *filetree_controller_path
    filetree_controller_execution_environments: *filetree_controller_path
    filetree_controller_applications: *filetree_controller_path
    filetree_controller_inventories: *filetree_controller_path
    filetree_controller_inventory_sources: *filetree_controller_path
    filetree_controller_instance_groups: *filetree_controller_path
    filetree_controller_hosts: *filetree_controller_path
    filetree_controller_groups: *filetree_controller_path
    filetree_controller_templates: *filetree_controller_path
    filetree_controller_workflow_job_templates: *filetree_controller_path
    filetree_controller_schedules: *filetree_controller_path
    filetree_controller_roles: *filetree_controller_path
  pre_tasks:
    - debug: var=inventory_hostname
    - debug: var=ansible_hostname
    - debug:
        msg: "{{ lookup('pipe', 'ls -lart /tmp') }}"
    - name: "Remove the /tmp/checkout path"
      ansible.builtin.file:
        path: /tmp/checkout
        state: absent

    - debug:
        msg: "{{ lookup('pipe', 'ls -lart /tmp') }}"
    - name: "Create the /tmp/checkout path"
      ansible.builtin.file:
        path: /tmp/checkout
        state: directory

    - name: "Clone the git repository with the base to be populated into the AWX instance"
      ansible.builtin.git:
        repo: 'https://github.com/automationiberia/migrate-awx-to-controller.git'
        dest: /tmp/checkout
        version: summit24

    - name: "Setup authentication (block)"
      no_log: "{{ controller_configuration_filetree_read_secure_logging | default('false') }}"
      when: controller_oauthtoken is not defined
      tags:
        - always
      block:
        - name: "Get the Authentication Token for the future requests"
          ansible.builtin.uri:
            url: "https://{{ controller_hostname }}/api/v2/tokens/"
            user: "{{ controller_username }}"
            password: "{{ controller_password }}"
            method: POST
            force_basic_auth: true
            validate_certs: "{{ controller_validate_certs }}"
            status_code: 201
          register: authtoken_res

        - name: "Set the oauth token to be used since now"
          ansible.builtin.set_fact:
            controller_oauthtoken: "{{ authtoken_res.json.token }}"
            controller_oauthtoken_url: "{{ authtoken_res.json.url }}"
  roles:
    - infra.controller_configuration.filetree_read
    - infra.controller_configuration.dispatch

  post_tasks:
    - name: "Delete the Authentication Token used"
      ansible.builtin.uri:
        url: "https://{{ controller_hostname }}{{ controller_oauthtoken_url }}"
        user: "{{ controller_username }}"
        password: "{{ controller_password }}"
        method: DELETE
        force_basic_auth: true
        validate_certs: "{{ controller_validate_certs }}"
        status_code: 204
      when: controller_oauthtoken_url is defined
...

#ansible-navigator run playbooks/config-controller-filetree.yaml -i localhost -m stdout --eei quay.io/automationiberia/casc/ee-casc:summit24 --vault-password-file .vault-password -e @vars/vault.yaml -e @vars/paths-awx.yaml -e@vars/vault-awx.yaml --vault-password-file .vault-password -e '{controller_configuration_filetree_read_secure_logging: false,ansible_async_dir: /home/runner/.ansible_async/}'


